/*
 * Source code generated by Celerio, a Jaxio product.
 * Documentation: http://www.jaxio.com/documentation/celerio/
 * Follow us on twitter: @jaxiosoft
 * Need commercial support ? Contact us: info@jaxio.com
 * Template pack-angular:src/main/java/dto/EntityDTOService.java.e.vm
 */
package uk.co.boots.columbus.cmdb.model.dto;

import java.util.List;
import java.util.stream.Collectors;

import javax.inject.Inject;

import org.springframework.data.domain.Example;
import org.springframework.data.domain.Page;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Transactional;

import uk.co.boots.columbus.cmdb.model.domain.PackageInfo;
import uk.co.boots.columbus.cmdb.model.domain.PackageType;
import uk.co.boots.columbus.cmdb.model.domain.Release;
import uk.co.boots.columbus.cmdb.model.domain.ServerType;
import uk.co.boots.columbus.cmdb.model.dto.support.PageRequestByExample;
import uk.co.boots.columbus.cmdb.model.dto.support.PageResponse;
import uk.co.boots.columbus.cmdb.model.repository.PackageInfoRepository;
import uk.co.boots.columbus.cmdb.model.repository.PackageTypeRepository;
import uk.co.boots.columbus.cmdb.model.repository.ReleaseRepository;
import uk.co.boots.columbus.cmdb.model.repository.ServerTypeRepository;

/**
 * A simple DTO Facility for PackageInfo.
 */
@Service
public class PackageInfoDTOService {

    @Inject
    private PackageInfoRepository packageInfoRepository;
    @Inject
    private PackageTypeDTOService packageTypeDTOService;
    @Inject
    private PackageTypeRepository packageTypeRepository;
    @Inject
    private ServerTypeDTOService serverTypeDTOService;
    @Inject
    private ServerTypeRepository serverTypeRepository;
    @Inject
    private ReleaseDTOService releaseDTOService;
    @Inject
    private ReleaseRepository releaseRepository;

    @Transactional(readOnly = true)
    public PackageInfoDTO findOne(Long id) {
        return toDTO(packageInfoRepository.findOne(id));
    }

    @Transactional(readOnly = true)
    public List<PackageInfoDTO> complete(String query, int maxResults) {
        List<PackageInfo> results = packageInfoRepository.complete(query, maxResults);
        return results.stream().map(this::toDTO).collect(Collectors.toList());
    }

    @Transactional(readOnly = true)
    public PageResponse<PackageInfoDTO> findAll(PageRequestByExample<PackageInfoDTO> req) {
        Example<PackageInfo> example = null;
        PackageInfo packageInfo = toEntity(req.example);

        if (packageInfo != null) {
            example = Example.of(packageInfo);
        }

        Page<PackageInfo> page;
        if (example != null) {
            page = packageInfoRepository.findAll(example, req.toPageable());
        } else {
            page = packageInfoRepository.findAll(req.toPageable());
        }

        List<PackageInfoDTO> content = page.getContent().stream().map(this::toDTO).collect(Collectors.toList());
        return new PageResponse<>(page.getTotalPages(), page.getTotalElements(), content);
    }

    /**
     * Save the passed dto as a new entity or update the corresponding entity if any.
     */
    @Transactional
    public PackageInfoDTO save(PackageInfoDTO dto) {
        if (dto == null) {
            return null;
        }

        PackageInfo packageInfo;
        if (dto.isIdSet()) {
            packageInfo = packageInfoRepository.findOne(dto.id);
        } else {
            packageInfo = new PackageInfo();
        }

        packageInfo.setName(dto.name);

        if (dto.packageType == null) {
            packageInfo.setPackageType(null);
        } else {
            PackageType packageType = packageInfo.getPackageType();
            if (packageType == null || (packageType.getId().compareTo(dto.packageType.id) != 0)) {
                packageInfo.setPackageType(packageTypeRepository.findOne(dto.packageType.id));
            }
        }

        if (dto.serverType == null) {
            packageInfo.setServerType(null);
        } else {
            ServerType serverType = packageInfo.getServerType();
            if (serverType == null || (serverType.getId().compareTo(dto.serverType.id) != 0)) {
                packageInfo.setServerType(serverTypeRepository.findOne(dto.serverType.id));
            }
        }

        if (dto.release == null) {
            packageInfo.setRelease(null);
        } else {
            Release release = packageInfo.getRelease();
            if (release == null || (release.getId().compareTo(dto.release.id) != 0)) {
                packageInfo.setRelease(releaseRepository.findOne(dto.release.id));
            }
        }

        return toDTO(packageInfoRepository.save(packageInfo));
    }

    /**
     * Converts the passed packageInfo to a DTO.
     */
    public PackageInfoDTO toDTO(PackageInfo packageInfo) {
        return toDTO(packageInfo, 1);
    }

    /**
     * Converts the passed packageInfo to a DTO. The depth is used to control the
     * amount of association you want. It also prevents potential infinite serialization cycles.
     *
     * @param packageInfo
     * @param depth the depth of the serialization. A depth equals to 0, means no x-to-one association will be serialized.
     *              A depth equals to 1 means that xToOne associations will be serialized. 2 means, xToOne associations of
     *              xToOne associations will be serialized, etc.
     */
    public PackageInfoDTO toDTO(PackageInfo packageInfo, int depth) {
        if (packageInfo == null) {
            return null;
        }

        PackageInfoDTO dto = new PackageInfoDTO();

        dto.id = packageInfo.getId();
        dto.name = packageInfo.getName();
        if (depth-- > 0) {
            dto.packageType = packageTypeDTOService.toDTO(packageInfo.getPackageType(), depth);
            dto.serverType = serverTypeDTOService.toDTO(packageInfo.getServerType(), depth);
            dto.release = releaseDTOService.toDTO(packageInfo.getRelease(), depth);
        }

        return dto;
    }

    /**
     * Converts the passed dto to a PackageInfo.
     * Convenient for query by example.
     */
    public PackageInfo toEntity(PackageInfoDTO dto) {
        return toEntity(dto, 1);
    }

    /**
     * Converts the passed dto to a PackageInfo.
     * Convenient for query by example.
     */
    public PackageInfo toEntity(PackageInfoDTO dto, int depth) {
        if (dto == null) {
            return null;
        }

        PackageInfo packageInfo = new PackageInfo();

        packageInfo.setId(dto.id);
        packageInfo.setName(dto.name);
        if (depth-- > 0) {
            packageInfo.setPackageType(packageTypeDTOService.toEntity(dto.packageType, depth));
            packageInfo.setServerType(serverTypeDTOService.toEntity(dto.serverType, depth));
            packageInfo.setRelease(releaseDTOService.toEntity(dto.release, depth));
        }

        return packageInfo;
    }
}