/*
 * Source code generated by Celerio, a Jaxio product.
 * Documentation: http://www.jaxio.com/documentation/celerio/
 * Follow us on twitter: @jaxiosoft
 * Need commercial support ? Contact us: info@jaxio.com
 * Template pack-angular:src/main/java/dto/EntityDTOService.java.e.vm
 */
package uk.co.boots.columbus.cmdb.model.dto;

import java.util.ArrayList;
import java.util.List;
import java.util.stream.Collectors;

import javax.inject.Inject;

import org.springframework.data.domain.Example;
import org.springframework.data.domain.Page;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Transactional;

import uk.co.boots.columbus.cmdb.model.domain.Server;
import uk.co.boots.columbus.cmdb.model.dto.support.PageRequestByExample;
import uk.co.boots.columbus.cmdb.model.dto.support.PageResponse;
import uk.co.boots.columbus.cmdb.model.repository.EnvironmentRepository;
import uk.co.boots.columbus.cmdb.model.repository.ServerRepository;
import uk.co.boots.columbus.cmdb.model.repository.ServerTypeRepository;

/**
 * A simple DTO Facility for Server.
 */
@Service
public class ServerDTOService {

    @Inject
    private ServerRepository serverRepository;
    @Inject
    private ServerTypeDTOService serverTypeDTOService;
    @Inject
    private ServerTypeRepository serverTypeRepository;
    @Inject
    private EnvironmentDTOService environmentDTOService;
    @Inject
    private EnvironmentRepository environmentRepository;
    
    @Transactional(readOnly = true)
    public ServerDTO findOne(Long id) {
        return toDTO(serverRepository.findOne(id));
    }

    @Transactional(readOnly = true)
    public List<ServerDTO> complete(String query, int maxResults) {
        List<Server> results = serverRepository.complete(query, maxResults);
        return results.stream().map(this::toDTO).collect(Collectors.toList());
    }

    @Transactional(readOnly = true)
    public PageResponse<ServerDTO> findAll(PageRequestByExample<ServerDTO> req) {
        Example<Server> example = null;
        Server server = toEntity(req.example);

        if (server != null) {
            example = Example.of(server);
        }

        Page<Server> page;
        if (example != null) {
            page = serverRepository.findAll(example, req.toPageable());
        } else {
            page = serverRepository.findAll(req.toPageable());
        }

        List<ServerDTO> content = page.getContent().stream().map(this::toDTO).collect(Collectors.toList());
        return new PageResponse<>(page.getTotalPages(), page.getTotalElements(), content);
    }

    /**
     * Save the passed dto as a new entity or update the corresponding entity if any.
     */
    @Transactional
    public ServerDTO save(ServerDTO dto) {
        Server s = toEntity(dto);
        s = serverRepository.save(s);
        dto.id = s.getId();
        return dto;
    }

    /**
     * Converts the passed server to a DTO.
     */
    public ServerDTO toDTO(Server server) {
        return toDTO(server, 1);
    }

    /**
     * Converts the passed server to a DTO. The depth is used to control the
     * amount of association you want. It also prevents potential infinite serialization cycles.
     *
     * @param server
     * @param depth the depth of the serialization. A depth equals to 0, means no x-to-one association will be serialized.
     *              A depth equals to 1 means that xToOne associations will be serialized. 2 means, xToOne associations of
     *              xToOne associations will be serialized, etc.
     */
    public ServerDTO toDTO(Server server, int depth) {
        if (server == null) {
            return null;
        }

        ServerDTO dto = new ServerDTO();

        dto.id = server.getId();
        dto.name = server.getName();
        if (depth-- > 0) {
            dto.serverType = serverTypeDTOService.toDTO(server.getServerType(), depth);
            dto.environments = environmentDTOService.toDTO(server.getEnvironments(), depth);
        }

        return dto;
    }

    /**
     * Converts the passed dto to a Server.
     * Convenient for query by example.
     */
    public Server toEntity(ServerDTO dto) {
        return toEntity(dto, 1);
    }

    /**
     * Converts the passed dto to a Server.
     * Convenient for query by example.
     */
    public Server toEntity(ServerDTO dto, int depth) {

    	if (dto == null) {
            return null;
        }

        Server server;
        if (dto.isIdSet()) {
            server = serverRepository.findOne(dto.id);
        } else {
            server = new Server();
        }

        server.setId(dto.id);
        server.setName(dto.name);
        if (depth-- > 0) {
            server.setServerType(serverTypeDTOService.toEntity(dto.serverType, depth));
            server.setEnvironments(environmentDTOService.toEntity(dto.environments, depth));
        }
        return server;
    }
    
    public List<Server> toEntity(List<ServerDTO> dtoList, int depth) {
        if (dtoList == null)
        	return null;
    	List<Server> ret = new ArrayList<Server>();
    	for (ServerDTO dto : dtoList)
    		ret.add(toEntity(dto, depth));
        return ret;
    }

    public List<ServerDTO> toDTO(List<Server> serverList, int depth) {
        if (serverList == null)
        	return null;
    	List<ServerDTO> ret = new ArrayList<ServerDTO>();
    	for (Server s : serverList)
    		ret.add(toDTO(s, depth));
        return ret;
    }
    
}