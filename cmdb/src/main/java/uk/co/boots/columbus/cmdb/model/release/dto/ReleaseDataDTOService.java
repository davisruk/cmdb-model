/*
 * Source code generated by Celerio, a Jaxio product.
 * Documentation: http://www.jaxio.com/documentation/celerio/
 * Follow us on twitter: @jaxiosoft
 * Need commercial support ? Contact us: info@jaxio.com
 * Template pack-angular:src/main/java/dto/EntityDTOService.java.e.vm
 */
package uk.co.boots.columbus.cmdb.model.release.dto;

import java.util.List;
import java.util.stream.Collectors;

import javax.inject.Inject;

import org.springframework.data.domain.Example;
import org.springframework.data.domain.Page;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Transactional;

import uk.co.boots.columbus.cmdb.model.core.dto.support.PageRequestByExample;
import uk.co.boots.columbus.cmdb.model.core.dto.support.PageResponse;
import uk.co.boots.columbus.cmdb.model.release.domain.Release;
import uk.co.boots.columbus.cmdb.model.release.domain.ReleaseData;
import uk.co.boots.columbus.cmdb.model.release.domain.ReleaseDataType;
import uk.co.boots.columbus.cmdb.model.release.repository.ReleaseDataRepository;
import uk.co.boots.columbus.cmdb.model.release.repository.ReleaseDataTypeRepository;
import uk.co.boots.columbus.cmdb.model.release.repository.ReleaseRepository;

/**
 * A simple DTO Facility for ReleaseData.
 */
@Service
public class ReleaseDataDTOService {

    @Inject
    private ReleaseDataRepository releaseDataRepository;
    @Inject
    private ReleaseDTOService releaseDTOService;
    @Inject
    private ReleaseRepository releaseRepository;
    @Inject
    private ReleaseDataTypeDTOService releaseDataTypeDTOService;
    @Inject
    private ReleaseDataTypeRepository releaseDataTypeRepository;

    @Transactional(readOnly = true)
    public ReleaseDataDTO findOne(Long id) {
        return toDTO(releaseDataRepository.findOne(id));
    }

    @Transactional(readOnly = true)
    public List<ReleaseDataDTO> complete(String query, int maxResults) {
        List<ReleaseData> results = releaseDataRepository.complete(query, maxResults);
        return results.stream().map(this::toDTO).collect(Collectors.toList());
    }

    @Transactional(readOnly = true)
    public PageResponse<ReleaseDataDTO> findAll(PageRequestByExample<ReleaseDataDTO> req) {
        Example<ReleaseData> example = null;
        ReleaseData releaseData = toEntity(req.example);

        if (releaseData != null) {
            example = Example.of(releaseData);
        }

        Page<ReleaseData> page;
        if (example != null) {
            page = releaseDataRepository.findAll(example, req.toPageable());
        } else {
            page = releaseDataRepository.findAll(req.toPageable());
        }

        List<ReleaseDataDTO> content = page.getContent().stream().map(this::toDTO).collect(Collectors.toList());
        return new PageResponse<>(page.getTotalPages(), page.getTotalElements(), content);
    }

    /**
     * Save the passed dto as a new entity or update the corresponding entity if any.
     */
    @Transactional
    public ReleaseDataDTO save(ReleaseDataDTO dto) {
        if (dto == null) {
            return null;
        }

        ReleaseData releaseData;
        if (dto.isIdSet()) {
            releaseData = releaseDataRepository.findOne(dto.id);
        } else {
            releaseData = new ReleaseData();
        }

        releaseData.setParam(dto.param);
        releaseData.setValue(dto.value);

        if (dto.release == null) {
            releaseData.setRelease(null);
        } else {
            Release release = releaseData.getRelease();
            if (release == null || (release.getId().compareTo(dto.release.id) != 0)) {
                releaseData.setRelease(releaseRepository.findOne(dto.release.id));
            }
        }

        if (dto.dataType == null) {
            releaseData.setDataType(null);
        } else {
            ReleaseDataType dataType = releaseData.getDataType();
            if (dataType == null || (dataType.getId().compareTo(dto.dataType.id) != 0)) {
                releaseData.setDataType(releaseDataTypeRepository.findOne(dto.dataType.id));
            }
        }

        return toDTO(releaseDataRepository.save(releaseData));
    }

    /**
     * Converts the passed releaseData to a DTO.
     */
    public ReleaseDataDTO toDTO(ReleaseData releaseData) {
        return toDTO(releaseData, 1);
    }

    /**
     * Converts the passed releaseData to a DTO. The depth is used to control the
     * amount of association you want. It also prevents potential infinite serialization cycles.
     *
     * @param releaseData
     * @param depth the depth of the serialization. A depth equals to 0, means no x-to-one association will be serialized.
     *              A depth equals to 1 means that xToOne associations will be serialized. 2 means, xToOne associations of
     *              xToOne associations will be serialized, etc.
     */
    public ReleaseDataDTO toDTO(ReleaseData releaseData, int depth) {
        if (releaseData == null) {
            return null;
        }

        ReleaseDataDTO dto = new ReleaseDataDTO();

        dto.param = releaseData.getParam();
        dto.value = releaseData.getValue();
        dto.id = releaseData.getId();
        if (depth-- > 0) {
            dto.release = releaseDTOService.toDTO(releaseData.getRelease(), depth);
            dto.dataType = releaseDataTypeDTOService.toDTO(releaseData.getDataType(), depth);
        }

        return dto;
    }

    /**
     * Converts the passed dto to a ReleaseData.
     * Convenient for query by example.
     */
    public ReleaseData toEntity(ReleaseDataDTO dto) {
        return toEntity(dto, 1);
    }

    /**
     * Converts the passed dto to a ReleaseData.
     * Convenient for query by example.
     */
    public ReleaseData toEntity(ReleaseDataDTO dto, int depth) {
        if (dto == null) {
            return null;
        }

        ReleaseData releaseData = new ReleaseData();

        releaseData.setParam(dto.param);
        releaseData.setValue(dto.value);
        releaseData.setId(dto.id);
        if (depth-- > 0) {
            releaseData.setRelease(releaseDTOService.toEntity(dto.release, depth));
            releaseData.setDataType(releaseDataTypeDTOService.toEntity(dto.dataType, depth));
        }

        return releaseData;
    }
}