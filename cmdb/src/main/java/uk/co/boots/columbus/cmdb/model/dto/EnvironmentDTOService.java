/*
 * Source code generated by Celerio, a Jaxio product.
 * Documentation: http://www.jaxio.com/documentation/celerio/
 * Follow us on twitter: @jaxiosoft
 * Need commercial support ? Contact us: info@jaxio.com
 * Template pack-angular:src/main/java/dto/EntityDTOService.java.e.vm
 */
package uk.co.boots.columbus.cmdb.model.dto;

import java.util.List;
import java.util.stream.Collectors;

import javax.inject.Inject;

import org.springframework.data.domain.Example;
import org.springframework.data.domain.Page;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Transactional;

import uk.co.boots.columbus.cmdb.model.domain.Environment;
import uk.co.boots.columbus.cmdb.model.domain.Release;
import uk.co.boots.columbus.cmdb.model.dto.support.PageRequestByExample;
import uk.co.boots.columbus.cmdb.model.dto.support.PageResponse;
import uk.co.boots.columbus.cmdb.model.repository.EnvironmentRepository;
import uk.co.boots.columbus.cmdb.model.repository.ReleaseRepository;

/**
 * A simple DTO Facility for Environment.
 */
@Service
public class EnvironmentDTOService {

    @Inject
    private EnvironmentRepository environmentRepository;
    @Inject
    private ReleaseDTOService releaseDTOService;
    @Inject
    private ReleaseRepository releaseRepository;

    @Transactional(readOnly = true)
    public EnvironmentDTO findOne(Long id) {
        return toDTO(environmentRepository.findOne(id));
    }

    @Transactional(readOnly = true)
    public List<EnvironmentDTO> complete(String query, int maxResults) {
        List<Environment> results = environmentRepository.complete(query, maxResults);
        return results.stream().map(this::toDTO).collect(Collectors.toList());
    }

    @Transactional(readOnly = true)
    public PageResponse<EnvironmentDTO> findAll(PageRequestByExample<EnvironmentDTO> req) {
        Example<Environment> example = null;
        Environment environment = toEntity(req.example);

        if (environment != null) {
            example = Example.of(environment);
        }

        Page<Environment> page;
        if (example != null) {
            page = environmentRepository.findAll(example, req.toPageable());
        } else {
            page = environmentRepository.findAll(req.toPageable());
        }

        List<EnvironmentDTO> content = page.getContent().stream().map(this::toDTO).collect(Collectors.toList());
        return new PageResponse<>(page.getTotalPages(), page.getTotalElements(), content);
    }

    /**
     * Save the passed dto as a new entity or update the corresponding entity if any.
     */
    @Transactional
    public EnvironmentDTO save(EnvironmentDTO dto) {
        if (dto == null) {
            return null;
        }

        Environment environment;
        if (dto.isIdSet()) {
            environment = environmentRepository.findOne(dto.id);
        } else {
            environment = new Environment();
        }

        environment.setName(dto.name);

        if (dto.release == null) {
            environment.setRelease(null);
        } else {
            Release release = environment.getRelease();
            if (release == null || (release.getId().compareTo(dto.release.id) != 0)) {
                environment.setRelease(releaseRepository.findOne(dto.release.id));
            }
        }

        return toDTO(environmentRepository.save(environment));
    }

    /**
     * Converts the passed environment to a DTO.
     */
    public EnvironmentDTO toDTO(Environment environment) {
        return toDTO(environment, 1);
    }

    /**
     * Converts the passed environment to a DTO. The depth is used to control the
     * amount of association you want. It also prevents potential infinite serialization cycles.
     *
     * @param environment
     * @param depth the depth of the serialization. A depth equals to 0, means no x-to-one association will be serialized.
     *              A depth equals to 1 means that xToOne associations will be serialized. 2 means, xToOne associations of
     *              xToOne associations will be serialized, etc.
     */
    public EnvironmentDTO toDTO(Environment environment, int depth) {
        if (environment == null) {
            return null;
        }

        EnvironmentDTO dto = new EnvironmentDTO();

        dto.id = environment.getId();
        dto.name = environment.getName();
        if (depth-- > 0) {
            dto.release = releaseDTOService.toDTO(environment.getRelease(), depth);
        }

        return dto;
    }

    /**
     * Converts the passed dto to a Environment.
     * Convenient for query by example.
     */
    public Environment toEntity(EnvironmentDTO dto) {
        return toEntity(dto, 1);
    }

    /**
     * Converts the passed dto to a Environment.
     * Convenient for query by example.
     */
    public Environment toEntity(EnvironmentDTO dto, int depth) {
        if (dto == null) {
            return null;
        }

        Environment environment = new Environment();

        environment.setId(dto.id);
        environment.setName(dto.name);
        if (depth-- > 0) {
            environment.setRelease(releaseDTOService.toEntity(dto.release, depth));
        }

        return environment;
    }
}